#!@ghc@/bin/runhaskell
{-# LANGUAGE OverloadedStrings #-}
import           Control.Monad.IO.Class (liftIO)
import           Control.Monad.Trans.Resource (runResourceT)
import qualified Data.ByteString.Char8 as B
import           Data.Conduit ((=$=))
import           Data.Conduit (runConduit)
import           Data.Conduit.Binary (sourceFile)
import qualified Data.Conduit.List as L
import           System.Environment (getArgs)
import           Text.HTML.TagStream.ByteString (tokenStream)
import           Text.HTML.TagStream.Types (Token'(TagOpen))

main = mapM_ (runResourceT . runConduit . conduit) =<< getArgs

conduit filename =
    sourceFile filename
    =$= tokenStream
    =$= L.map links
    =$= L.catMaybes
    =$= L.mapM_ (liftIO . B.putStrLn)

links (TagOpen "link" attrs _) | lookup "rel" attrs == Just "alternate" =
    let href = lookup "href" attrs
    in case lookup "type" attrs of
        Just "application/atom+xml" -> href
        Just "application/rss+xml" -> href
        _ -> Nothing
links _ = Nothing
