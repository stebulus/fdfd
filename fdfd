#!@bash@/bin/bash
set -euo pipefail
me=$(@coreutils@/bin/basename "${BASH_SOURCE[0]}")

DC=http://purl.org/dc/terms/
FDFD_DATA=tag:amotlpaa.org,2016:fdfd-data/
XS=http://www.w3.org/2001/XMLSchema#

cleanup() { if [ -v tmp ]; then rm -rf "$tmp"; fi }
trap cleanup EXIT

require_tmp() {
    declare -g tmp
    if [ ! -v tmp ]; then
        tmp=$(@coreutils@/bin/mktemp --directory --tmpdir "$me".XXXXXXXX)
    fi
}

rdf() {
    @redland@/bin/rdfproc -s sqlite "$datadir"/db "$@"
}

command_add() {
    local uri
    case $# in
        0)  command_add -
            ;;
        *)  for uri in "$@"; do
                case "$uri" in
                    -)  require_tmp
                        cat > "$tmp"/triples-to-add
                        command_add "$tmp"/triples-to-add
                        ;;
                    *)  rdf parse-stream "$uri" ntriples
                        ;;
                esac
            done
            ;;
    esac
}

command_dump() {
    if [ $# -ne 0 ]; then exit_usage dump; fi
    rdf serialize ntriples |
    @sed@/bin/sed -e 's,^\(<[^>]*>\) \(<[^>]*>\) \(.*\) \.$,\1\t\2\t\3\t.,;t end;Q 1;:end'
}

command_fetch() {
    if [ $# -lt 1 ]; then exit_usage "fetch URL [URL ...]"; fi
    local url fetchbase fetchdir fetchdiruri now
    for url in "$@"; do
        fetchbase=$(new_data_subdir)
        fetchdir=$datadir/$fetchbase
        fetchdiruri=$FDFD_DATA$fetchbase
        {
            turtle_preamble
            echo "<.> rdf:type amfd:fetch"
            echo "  ; amfd:fetch-url <$url>"
            now=$(timestamp)
            echo "  ; amfd:when-start $now"
            echo "  ."
        } >"$fetchdir"/facts.ttl
        @curl@/bin/curl \
            --compressed \
            --dump-header "$fetchdir"/headers \
            --location \
            --output "$fetchdir"/entity \
            --show-error \
            --silent \
            "$url"
        now=$(timestamp)
        echo "<.> amfd:when-end $now ." >>"$fetchdir"/facts.ttl
        echo $fetchdir
    done
}

command_new() {
    if [ $# -ne 0 ]; then exit_usage "new"; fi
    local now
    now=$(@coreutils@/bin/date -Is)
    @coreutils@/bin/mkdir -p "$datadir"
    rdf --new add-typed \
        "$FDFD_DATA"db \
        "$DC"created \
        "$now" \
        "" \
        "$XS"dateTime \
        "$FDFD_DATA"db
}

extract_rss() {
    require_tmp
    @coreutils@/bin/rm -rf "$tmp"/extract-rss
    @coreutils@/bin/mkdir "$tmp"/extract-rss
    @coreutils@/bin/cat "$@" |
    @xml2@/bin/xml2 |
    @coreutils@/bin/csplit \
        --prefix "$tmp"/extract-rss/ \
        - \
        '/^\/rss\/channel\/item$/' '{*}' \
        >/dev/null
    for f in "$tmp"/extract-rss/*; do
        @sed@/bin/sed -n '/^\/rss\/channel\/item\//p' "$f" |
        @coreutils@/bin/cut -c19- |
        while IFS='=' read k v; do
            case "$k" in
                pubDate) v=$(@coreutils@/bin/date -Is --date="$v") ;;
                *) ;;
            esac
            echo "$k=$v"
        done |
        @awk@/bin/awk -F= '
            function rdfstr(s) {
                gsub(/\\/, "\\\\", s)
                gsub(/\t/, "\\t", s)
                gsub(/\b/, "\\b", s)
                gsub(/\n/, "\\n", s)
                gsub(/\r/, "\\r", s)
                gsub(/\f/, "\\f", s)
                gsub(/"/, "\\\"", s)
                return "\"" s "\""
            }
            function rdfuri(s) {
                gsub(/\\/, "\\u005C", s)
                gsub("\x00", "\\u0000", s)
                gsub("\x01", "\\u0001", s)
                gsub("\x02", "\\u0002", s)
                gsub("\x03", "\\u0003", s)
                gsub("\x04", "\\u0004", s)
                gsub("\x05", "\\u0005", s)
                gsub("\x06", "\\u0006", s)
                gsub("\x07", "\\u0007", s)
                gsub("\x08", "\\u0008", s)
                gsub("\x09", "\\u0009", s)
                gsub("\x0a", "\\u000A", s)
                gsub("\x0b", "\\u000B", s)
                gsub("\x0c", "\\u000C", s)
                gsub("\x0d", "\\u000D", s)
                gsub("\x0e", "\\u000E", s)
                gsub("\x0f", "\\u000F", s)
                gsub("\x10", "\\u0010", s)
                gsub("\x11", "\\u0011", s)
                gsub("\x12", "\\u0012", s)
                gsub("\x13", "\\u0013", s)
                gsub("\x14", "\\u0014", s)
                gsub("\x15", "\\u0015", s)
                gsub("\x16", "\\u0016", s)
                gsub("\x17", "\\u0017", s)
                gsub("\x18", "\\u0018", s)
                gsub("\x19", "\\u0019", s)
                gsub("\x1a", "\\u001A", s)
                gsub("\x1b", "\\u001B", s)
                gsub("\x1c", "\\u001C", s)
                gsub("\x1d", "\\u001D", s)
                gsub("\x1e", "\\u001E", s)
                gsub("\x1f", "\\u001F", s)
                gsub("\x20", "\\u0020", s)
                gsub(/"/, "\\u0022", s)
                gsub(/</, "\\u003C", s)
                gsub(/>/, "\\u003E", s)
                gsub(/\^/, "\\u005E", s)
                gsub(/`/, "\\u0060", s)
                gsub(/{/, "\\u007B", s)
                gsub(/\|/, "\\u007C", s)
                gsub(/}/, "\\u007D", s)
                return "<" s ">"
            }
            function stash() {
                i = index($0, "=")
                if (i != 0) {
                    v = substr($0, i+1)
                    if ($1 in a)
                        a[$1] = a[$1] "\n" v
                    else
                        a[$1] = v
                    stashed = 1
                }
            }
            BEGIN { stashed = 0 }
            $1 == "title" { stash() }
            $1 == "link" { stash() }
            $1 == "guid" { stash() }
            $1 == "pubDate" { stash() }
            END {
                if (stashed) {
                    if ("guid" in a)
                        subject = rdfuri(a["guid"])
                    else
                        subject = "[]"
                    print subject " rdf:type amfd:item"
                    print "  ; dc:source <.>"
                    if ("title" in a)
                        print "  ; dc:title " rdfstr(a["title"])
                    if ("pubDate" in a)
                        print "  ; dc:date " rdfstr(a["pubDate"]) "^^xsd:dateTime"
                    if ("link" in a)
                        print "  ; amfd:link " rdfuri(a["link"])
                    print "  ."
                }
            }
            '
    done |
    @awk@/bin/awk '
        { print }
        END {
            if (NR == 0) {
                print "extract_rss: no items found" >"/dev/stderr"
                exit 1
            }
        }
        '
}

new_data_subdir() {
    local chars d
    chars=$(@coreutils@/bin/dd if=/dev/urandom count=20 bs=1 2>/dev/null |
        @coreutils@/bin/base32 |
        @coreutils@/bin/tr A-Z a-z)
    mkdir -p "$datadir/$chars"
    echo "$chars"
}

timestamp() {
    local now
    now=$(date -Ins)
    echo "\"$now\"^^<${XS}dateTime>"
}

turtle_preamble() {
    echo "@prefix amfd: <tag:amotlpaa.org,2016:fdfd/> ."
    echo "@prefix dc: <http://purl.org/dc/terms/> ."
    echo "@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> ."
    echo "@prefix xsd: <http://www.w3.org/2001/XMLSchema#> ."
}

exit_usage() {
    local base
    base="usage: $me DATADIR"
    case $# in
        0)  echo "$base COMMAND [ARG ...]" >&2
            echo "where COMMAND is one of" >&2
            declare -F |
            @grep@/bin/grep '^declare -f command_' |
            @sed@/bin/sed 's,^declare -f command_,    ,' >&2
            ;;
        *)  echo "$base $@" >&2
            ;;
    esac
    exit 1
}

if [ $# -lt 2 ]; then exit_usage; fi
datadir=$1
command=$2
shift 2
"command_$command" "$@"
