#!@bash@/bin/bash
set -euo pipefail
me=$(@coreutils@/bin/basename "${BASH_SOURCE[0]}")
here=$(@coreutils@/bin/dirname "${BASH_SOURCE[0]}")

cleanup() { if [ -v tmp ]; then rm -rf "$tmp"; fi }
trap cleanup EXIT

require_tmp() {
    declare -g tmp
    if [ ! -v tmp ]; then
        tmp=$(@coreutils@/bin/mktemp --directory --tmpdir "$me".XXXXXXXX)
    fi
}

command_extract_atom() {
    extract_atom "$@"
}

command_extract_rss() {
    extract_rss "$@"
}

command_fetch() {
    if [ $# -lt 1 ]; then exit_usage "fetch URL [URL ...]"; fi
    local url fetchbase fetchdir got_items now
    for url in "$@"; do
        fetchdir=$(new_data_subdir)
        {
            preamble_turtle
            echo "<.> rdf:type amfd:fetch ;"
            echo "  amfd:fetch-url <$url> ;"
            now=$(timestamp)
            echo "  amfd:when-start $now ."
        } >"$fetchdir"/facts.ttl
        @curl@/bin/curl \
            --compressed \
            --dump-header "$fetchdir"/headers \
            --location \
            --output "$fetchdir"/entity \
            --show-error \
            --silent \
            "$url"
        got_items=no
        for fmt in rss atom; do
            if extract_"$fmt" "$fetchdir"/entity >>"$fetchdir"/facts.ttl 2>/dev/null; then
                got_items=yes
                break
            fi
        done
        {
            case "$got_items" in
                yes) echo "<.> amfd:success \"true\"^^xsd:boolean ;"
                    ;;
                no) echo "<.> amfd:success \"false\"^^xsd:boolean ;"
                    echo "  amfd:failure-msg \"no items found\" ;"
                    ;;
                *)  msg="internal error: got_items = $got_items"
                    echo "$me: $msg" >&2
                    echo "<.> amfd:success \"false\"^^xsd:boolean ;"
                    echo "  amfd:failure-msg \"$msg\" ;"
                    ;;
            esac
            now=$(timestamp)
            echo "  amfd:when-end $now ."
        } >>"$fetchdir"/facts.ttl
        echo "$fetchdir"/facts.ttl
    done
}

expect_some_lines() {
    local msg
    msg=$(echo "$@")
    @awk@/bin/awk -v msg="$msg" '
        { print }
        END {
            if (NR == 0) {
                print msg >"/dev/stderr"
                exit 1
            }
        }
        '
}

extract_atom() {
    for f in "$@"; do
        itemsdir=$(xml_pieces /feed/entry "$f")
        for f in "$itemsdir"/*; do
            @awk@/bin/awk -f "$here"/../lib/items.awk --source '
                $1 == "title" { stash("title") }
                $1 == "link/@href" { stash("link") }
                $1 == "id" { stash("id") }
                $1 == "updated" { stash("date") }
                ' "$f"
        done
    done |
    expect_some_lines "extract_atom: no items found"
}

extract_rss() {
    for f in "$@"; do
        itemsdir=$(xml_pieces /rss/channel/item "$f")
        for f in "$itemsdir"/*; do
            cat "$f" |
            while IFS='=' read k v; do
                case "$k" in
                    pubDate) v=$(xsd_date --date="$v") ;;
                    *) ;;
                esac
                echo "$k=$v"
            done |
            @awk@/bin/awk -f "$here"/../lib/items.awk --source '
                $1 == "title" { stash("title") }
                $1 == "link" { stash("link") }
                $1 == "guid" { stash("id") }
                $1 == "pubDate" { stash("date") }
                '
        done
    done |
    expect_some_lines "extract_rss: no items found"
}

new_data_subdir() {
    local chars d
    chars=$(nonce 20)
    mkdir -p "$chars"
    echo "$chars"
}

nonce() {
    @coreutils@/bin/dd if=/dev/urandom count="$1" bs=1 2>/dev/null |
    @coreutils@/bin/base32 |
    @coreutils@/bin/tr A-Z a-z
}

preamble_raw() {
    echo "amfd: <tag:amotlpaa.org,2016:fdfd/>"
    echo "dc: <http://purl.org/dc/terms/>"
    echo "rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>"
    echo "xsd: <http://www.w3.org/2001/XMLSchema#>"
}

preamble_sparql() {
    preamble_raw | @sed@/bin/sed 's,^,PREFIX ,'
}

preamble_turtle() {
    preamble_raw | @sed@/bin/sed 's,.*,@prefix & .,'
}

subtmpdir() {
    local name
    name=$(nonce 5)
    require_tmp
    mkdir "$tmp/$name"
    echo "$tmp/$name"
}

timestamp() {
    local now
    now=$(xsd_date)
    echo "\"$now\"^^xsd:dateTime"
}

xml_pieces() {
    if [ $# -ne 2 ]; then exit_usage "xml_pieces /foo/bar file"; fi
    local file path
    path=$1
    file=$2
    pathregex=${path//\//\\/}
    itemsdir=$(subtmpdir)
    @xml2@/bin/xml2 < "$file" |
    @coreutils@/bin/csplit \
        --prefix "$itemsdir"/ \
        - \
        "/^${pathregex}$/" '{*}' \
        >/dev/null
    for f in "$itemsdir"/*; do
        @sed@/bin/sed -i \
            -e "/^${pathregex}\//!d" \
            -e "s,^${pathregex}\/,," \
            "$f"
    done
    echo "$itemsdir"
}

xsd_date() {
    @coreutils@/bin/date +%FT%T.%N%:z "$@"
}

exit_usage() {
    local base
    base="usage: $me"
    case $# in
        0)  echo "$base COMMAND [ARG ...]" >&2
            echo "where COMMAND is one of" >&2
            declare -F |
            @grep@/bin/grep '^declare -f command_' |
            @sed@/bin/sed -e 's,^declare -f command_,    ,' \
                -e 's/_/-/g' >&2
            ;;
        *)  echo "$base $@" >&2
            ;;
    esac
    exit 1
}

if [ $# -lt 1 ]; then exit_usage; fi
command=$(echo "$1" | tr - _)
shift
"command_$command" "$@"
